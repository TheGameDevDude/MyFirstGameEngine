#version 440 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[10];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D specularMap;
uniform float usesSpecularMap;
uniform vec3 lightColor[10];
uniform vec3 attenuation[10];
uniform float shineDamper;
uniform float reflectivity;

void main(void){
	
	vec3 unitNormal = normalize(surfaceNormal);	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for(int i=0; i<10; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal,unitLightVector);
		float brightness = max(nDot1,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	}
	
	totalDiffuse = max(totalDiffuse,0.2);
	
	if(usesSpecularMap > 0.5){
		vec4 mapInfo = texture(specularMap,pass_textureCoords);
		totalSpecular *= mapInfo.r;
		if(mapInfo.g > 0.5){
			totalDiffuse = vec3(1.0);
		}
	}
	
	out_Color = vec4(totalDiffuse,1.0) * texture(textureSampler,pass_textureCoords) + vec4(totalSpecular,1.0);
}